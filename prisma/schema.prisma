// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  type String @default("init")
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobSeeker {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name String 
  jobCategory String[]
  applications Application[]
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Employer {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  address     String
  logo        String
  email       String @unique
  jobListings JobListing[]
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model JobListing {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  salary      Float
  jobCategory String @default("")
  location    String
  workType    String
  applications Application[]
  Employer     Employer?     @relation(fields: [employerId], references: [id])
  employerId   String?       @db.ObjectId
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  coverLetter  String?
  status       String      @default("pending")
  JobSeeker    JobSeeker?  @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId  String?     @db.ObjectId
  JobListing   JobListing? @relation(fields: [jobListingId], references: [id])
  jobListingId String?     @db.ObjectId
  created DateTime @default(now())
  updated DateTime @updatedAt
}
